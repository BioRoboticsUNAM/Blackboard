using System;
using System.Collections.Generic;
using System.Net;
using System.Net.Sockets;
using System.Text.RegularExpressions;
using System.Threading;

namespace BlackboardApi
{

	#region Delegados
	#endregion

	/// <summary>
	/// Implements a ModuleServer
	/// </summary>
	public class ModuleServer : IModule
	{

		#region Constantes
		#endregion

		#region Variables

		/// <summary>
		/// Module name
		/// </summary>
		private string name;
		/// <summary>
		/// The blackboard this module is bind to
		/// </summary>
		internal Blackboard parent;
		/// <summary>
		/// List of the command prototypes supported by the Application Module
		/// </summary>
		private MessagePrototypeCollection prototypes;
		
		#region Message flow vars


		/// <summary>
		/// Tells if the module is busy
		/// </summary>
		private bool busy;
		/*
		/// <summary>
		/// List of commands waiting for a response
		/// </summary>
		//private List<Command> waitingResponse;
		/// <summary>
		/// List of responses received
		/// </summary>
		//private List<Response> responses;
		/// <summary>
		/// List of commands received
		/// </summary>
		//private List<Command> commands;
		*/
		#endregion

		#region Socket and connection vars

		/// <summary>
		/// Connection socket to the Application Module
		/// </summary>
		private SocketTcpServer server;
		/// <summary>
		/// Port where to accept incomming connections
		/// </summary>
		private int port;
		/// <summary>
		/// Indicates if the ModuleServer is runnuing
		/// </summary>
		private bool running;

		#endregion

		#endregion

		#region Constructores

		/// <summary>
		/// Initializes a new instance of the ModuleServer class 
		/// </summary>
		/// <param name="name">Module name</param>
		/// <param name="port">Port of the Application Module</param>
		internal ModuleServer(string name, int port)
		{
			if ((port < 1024) || (port > 65535)) throw new ArgumentException("Port must be between 1024 and 65535", "port");
			if (!Regex.IsMatch(name, @"\w[\w\-_\d]{2,}")) throw new ArgumentException("Invalid module name", "name");
			this.name = name;
			this.port = port;
			this.busy = false;
			//this.waitingResponse = new List<Command>(10);
			//this.responses = new List<Response>();
			//this.commands = new List<Command>();
			//this.prototypes = new MessagePrototypeCollection(this);
		}

		/// <summary>
		/// Initializes a new instance of the ModuleServer class 
		/// </summary>
		/// <param name="name">Module name</param>
		/// <param name="port">Port where to accept incomming connections</param>
		/// <param name="prototypes">List of the command prototypes supported by the Application</param>
		public ModuleServer(string name, int port, Prototype[] prototypes)
			: this(name, port)
		{
			if ((prototypes == null) || (prototypes.Length == 0)) throw new ArgumentException("The prototypes list cannot be zero-length nor null");
			this.prototypes = new MessagePrototypeCollection(null, prototypes.Length);
			for (int i = 0; i < prototypes.Length; ++i)
				this.prototypes.Add(prototypes[i]);
		}

		#endregion

		#region Propiedades

		/// <summary>
		/// Gets a value indicating if the current ModuleServer is busy (waiting for a response)
		/// </summary>
		public bool Busy
		{
			get
			{
				return busy;
			}
		}

		/// <summary>
		/// Tells if there are clients connected to server
		/// </summary>
		public bool IsConnected
		{
			get
			{
				//if (server.)
				//	return client.IsOpen;
				//return false;
				return true;
			}
		}

		/// <summary>
		/// Tells if the current ModuleServer is running
		/// </summary>
		public bool IsRunning
		{
			get
			{
				return server.Started;
			}
		}

		/// <summary>
		/// Gets the name of the Module
		/// </summary>
		public string Name
		{
			get { return name; }
		}

		/// <summary>
		/// Gets the blackboard this ModuleServer is bind to
		/// </summary>
		public Blackboard Parent
		{
			get { return parent; }
		}

		/// <summary>
		/// Gets the port where accept incomming connections
		/// </summary>
		public int Port
		{
			get { return port; }
		}

		/// <summary>
		/// Gets the prototypes managed by the Module
		/// </summary>
		public MessagePrototypeCollection Prototypes
		{
			get
			{
				return prototypes;
			}
		}

		#endregion

		#region Eventos

		/// <summary>
		/// Occurs when a Command is received trough socket
		/// </summary>
		public event CommandReceivedEH CommandReceived;

		/// <summary>
		/// Occurs when a Response is received trough socket
		/// </summary>
		public event ResponseReceivedEH ResponseReceived;

		#endregion

		#region Metodos

		/// <summary>
		/// Sends a command to the module
		/// </summary>
		/// <param name="command">Response to send</param>
		/// <returns>true if the command has been sent, false otherwise</returns>
		public bool Send(Command command)
		{
			/*
			// Check if this module is the destination module for the command
			if (this != command.Destination)
				throw new Exception("Command marked to be sent through other module");
			// Check is connection has been stablished.
			if (!client.IsOpen)
				return false;
			// Check if module is not busy and command is not a priority command
			if (busy && !command.Prototype.HasPriority)
				return false;
			// Send the command
			try { client.Send(command.StringToSend + "\0"); }
			catch { return false; }
			return true
			*/
			return false;
		}

		/// <summary>
		/// Synchronusly sends a command response to the module
		/// </summary>
		/// <param name="response">Response to send</param>
		/// <returns>true if the response has been sent, false otherwise</returns>
		public bool Send(Response response)
		{
			/*
			// Check if this module is the destination module for the response
			if (this != response.Destination)
				throw new Exception("Response marked to be sent through other module");
			// Check is connection has been stablished.
			if (!client.IsOpen)
				return false;
			// Send the response
			try { client.Send(response.StringToSend + "\0"); }
			catch { return false; }
			return true;
			*/
			return false;
		}

		/// <summary>
		/// Initializes the socket
		/// </summary>
		private void setupSocket()
		{
			server = new SocketTcpServer(port);
			server.DataReceived += new TcpDataReceivedEventHandler(server_DataReceived);
			server.ClientConnected += new TcpClientConnectedEventHandler(server_ClientConnected);
			server.ClientDisconnected += new TcpClientConnectedEventHandler(server_ClientDisconnected);
		}

		/// <summary>
		/// Connect to the remote application and starts the command management system.
		/// If the ModuleClient is already running, it has no effect.
		/// </summary>
		public void Start()
		{
			if (running) return;
			running = true;
			if ((server != null) && (server.Started))
				server.Start();
			setupSocket();
		}

		/// <summary>
		/// Stops socket server and command management system.
		/// If the ModuleClient is not running, it has no effect.
		/// </summary>
		public void Stop()
		{
			if (!running) return;

			if (server.Started)
				server.Stop();
			server = null;
			running = false;
		}

		#endregion

		#region Event Handler Functions

		/// <summary>
		/// Performs operations when data is received trough socket
		/// </summary>
		/// <param name="packet">TCP Packet received</param>
		void server_DataReceived(TcpPacket packet)
		{
		}

		/// <summary>
		/// Performs operations when a client connects to the socket server
		/// </summary>
		/// <param name="s">Socket used for connection</param>
		void server_ClientConnected(Socket s)
		{
		}

		/// <summary>
		/// Performs operations when a client disconnects from the socket server
		/// </summary>
		/// <param name="s">Socket used for connection</param>
		void server_ClientDisconnected(Socket s)
		{
		}

		#endregion

		#region Metodos de Clase (Estáticos)
		#endregion

		#region IComparable<ModuleServer> Members

		/// <summary>
		/// Compares the current ModuleServer with another object of the same type.
		/// </summary>
		/// <param name="other">An object to compare with this object</param>
		/// <returns>A 32-bit signed integer that indicates the relative order of the objects being compared.</returns>
		public int CompareTo(IModule other)
		{
			return name.CompareTo(other.Name);
		}

		#endregion

	}
}
